

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<Integer> inorderTraversal(TreeNode root){
        ArrayList<Integer> result = new ArrayList<Integer>();
        if (root == null) return result;
        Stack<TreeNode> s = new Stack<TreeNode>();
        Stack<TreeNode> s2 = new Stack<TreeNode>();
        s.push(root);
        while(!s.isEmpty()){
            TreeNode n = s.peek();
            if (!s2.isEmpty() && s2.peek() == n){
                result.add(n.val);
                s.pop();
                s2.pop();
                continue;
            }
            if (n.left == null && n.right == null){
                s.pop();
                result.add(n.val);
            } else {
                s2.push(n);
                if (n.right != null){
                    n = s.pop();
                    s.push(n.right);
                    s.push(n);
                }
                if (n.left != null){
                    s.push(n.left);
                }
            }
        }
        return result;
    }
}
