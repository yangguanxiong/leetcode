/**
 * Using HashMap to store target - num[i] and i,
 * O(n) time
 * Two runners: O(n^2) time
 */
public class Solution {
    public int[] twoSum(int[] numbers, int target) {
        // int[] result = new int[2];
        // if (numbers.length < 2) return result;
        // HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        // for (int i = 0; i < numbers.length; i++){
        //     if (!map.containsKey(numbers[i])){
        //         map.put(target - numbers[i], i);
        //     } else {
        //         result[0] = map.get(numbers[i]) + 1;
        //         result[1] = i + 1;
        //         break;
        //     }
        // }
        // return result;
        
        
        int[] result = new int[2];
        if (numbers.length < 2) return result;
        for (int i = 0; i < numbers.length - 1; i++){
            for(int j = i + 1; j < numbers.length; j++){
                if (numbers[i] + numbers[j] == target){
                    result[0] = i + 1;
                    result[1] = j + 1;
                    break;
                }
            }
        }
        return result;
    }
}
