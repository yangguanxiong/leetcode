public class Solution2 {
   public ArrayList<String> generateParenthesis(int n) {
        ArrayList<String> result = new ArrayList<String>();
        StringBuffer sb = new StringBuffer();
        if (n == 0){
            result.add(sb.toString());
            return result;
        } else {
            generateParenthesisHelper(n, n, sb, result);
        }
        return result;
    }
    public void generateParenthesisHelper(int l, int r, StringBuffer sb, ArrayList<String> result){
        if (l == 0 && r == 0){
            result.add(sb.toString());
        }
        if (l > 0) generateParenthesisHelper(l - 1, r, sb.append('('), result);
        if (r > l) generateParenthesisHelper(l, r - 1, sb.append(')'), result);
        if (sb.length() > 0) sb.deleteCharAt(sb.length() - 1);
    }
}
///////////////////////////////////////////////////////////////////////////////////
// Apply Set to avoid duplicates

public class Solution1 {
    public ArrayList<String> generateParenthesis(int n) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<String> result = new ArrayList<String>();
        if (n <=0 ){
            String s = "";
            result.add(s);
            return result;
        }
        
        if (n == 1){
            String s = "()";
            result.add(s);
            return result;
        }
        
        Set<String> resultSet = generateParenthesesHelper(n);
        for (String astring: resultSet){
            result.add(astring);
        }
        return result;
            
        
    }
    
    public Set<String> generateParenthesesHelper(int n){
        Set<String> r = new HashSet<String>();
        if (n == 1){
            r.add("()");
            return r;
        }
        Set<String> sub = generateParenthesesHelper(n - 1);
        
        for (String insub: sub){
            for (int i = -1; i < insub.length(); i++){
                r.add(insub.substring(0, i+1) + "()" + insub.substring(i+1, insub.length()));
            }
        } 
        
        return r;
        
    }
}
