/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ArrayList<ListNode> lists) {
       if(lists.size() == 0) return null;
       
       Queue<ListNode> q = new PriorityQueue<ListNode>(lists.size(), new Comparator<ListNode>(){
           public int compare(ListNode n1, ListNode n2){
               if (n1.val > n2.val) return 1; //minHeap
               if (n1.val < n2.val) return -1;
               else return 0;
           }
       }); 
       
       for (ListNode n : lists){
           if (n != null) q.add(n);
       }
       ListNode newHead = new ListNode(0);
       ListNode cur = newHead;
       
       while(!q.isEmpty()){
           ListNode n = q.poll();
           cur.next = n;
           if (n.next != null){
               q.add(n.next);
           }
           cur = cur.next;
       }
       return newHead.next;
    }
}
