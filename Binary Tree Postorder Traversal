/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<Integer> postorderTraversal(TreeNode root) {
        //iterative method 2: do not change the graph, use 2 stacks
        ArrayList<Integer> result = new ArrayList<Integer>();
        if (root == null) return result;
        Stack<TreeNode> s = new Stack<TreeNode>();
        Stack<TreeNode> s2 = new Stack<TreeNode>();  // store fathers
        s.push(root);
        while(!s.isEmpty() ){
            TreeNode n = s.peek();
            if (!s2.isEmpty() && s2.peek() == n){
                result.add(n.val);
                s.pop();
                s2.pop();
                continue;
            }
            if (n.left == null && n.right == null){
                result.add(n.val);
                s.pop();
            } else {
                if (n.right != null){
                    s.push(n.right);
                }
                if (n.left != null){
                    s.push(n.left);
                }
                s2.push(n);
            }
        }
        return result;
        
        
        // iterative method 1: the original tree has been changed
        // ArrayList<Integer> result = new ArrayList<Integer>();
        // if (root == null) return result;
        // Stack<TreeNode> s = new Stack<TreeNode>();
        // s.push(root);
        // while(!s.isEmpty()){
        //     TreeNode n = s.peek();
        //     if (n.left == null && n.right == null){
        //         result.add(n.val);
        //         s.pop();
        //     } else {
        //         if (n.right != null){
        //             s.push(n.right);
        //             n.right = null;
        //         }
        //         if (n.left != null){
        //             s.push(n.left);
        //             n.left = null;
        //         }
        //     }
        // }
        // return result;
        
        
        
        // trival practice: recursion
        // ArrayList<Integer> result = new ArrayList<Integer>();
        // if (root == null) return result;
        // postorderTraversal(root, result);
        // return result;
    }
    
    // public void postorderTraversal(TreeNode root, ArrayList<Integer> result){
    //     if (root == null) return;
    //     if (root.left != null){
    //         postorderTraversal(root.left, result);
    //     }
    //     if (root.right != null){
    //         postorderTraversal(root.right, result);
    //     }
    //     result.add(root.val);
    // }
}
