/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if (root == null) return result;
        ArrayList<Integer> level = new ArrayList<Integer>();
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.add(root);
        int curNum = 1;
        int nextNum = 0;
        
        while(!q.isEmpty()){
            TreeNode n = q.poll();
            level.add(n.val);
            curNum--;
            if (n.left != null){
                q.add(n.left);
                nextNum++;
            }
            if (n.right != null){
                q.add(n.right);
                nextNum++;
            }
            if (curNum == 0){
                result.add(level);
                level = new ArrayList<Integer>();
                curNum = nextNum;
                nextNum = 0;
            }
        }
        ArrayList<ArrayList<Integer>> r = new ArrayList<ArrayList<Integer>>();
        for (int i = result.size() - 1; i >= 0; i-- ){
            r.add(result.get(i));
        }
        return r;
    }
}
