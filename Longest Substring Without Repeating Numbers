//Solution 2: two runners

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(s.length() <= 1) return s.length();
        int i = 0 ;
        int j = 1;
        int len = 0;
        HashMap<Character, Boolean> map = new HashMap<Character, Boolean>();
        map.put(s.charAt(0), true);
        while(j < s.length()){
            
            if (map.containsKey(s.charAt(j))){
                len = Math.max(len, j - i);
                while(map.containsKey(s.charAt(j))){
                    map.remove(s.charAt(i++));
                }
                map.put(s.charAt(j++), true);
            } else {
                map.put(s.charAt(j), true);
                j++;
            }
            
        }
        len = Math.max(len, j - i);
        return len;
        
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////

public static int lengthOfLongestSubstring(String s) {
        // Start typing your Java solution below
        // DO NOT write main() function
        
        if (s.length() == 0 ){
            return 0;
        }
        if (s.length() == 1){
        	return 1;
        }
       // int[] result = new int[]{0,0};
        int result = 1;
     //   char[] schar = s.toCharArray();
        Hashtable<Character, Integer> table = new Hashtable<Character, Integer>();
        
        for (int i = 0; i<s.length(); i++){
            if (table.containsKey(s.charAt(i))){
                // repeated char found
                result = i;
                
                int resultSub = lengthOfLongestSubstring(s.substring(1, s.length()));
//                System.out.println(s.substring(i, s.length()));
//                System.out.println("resultSub: " + resultSub);
                if (resultSub > result){
                    return resultSub;
                } else {
                	return result;
                }
            } else {
                table.put(s.charAt(i), 1);
            }
            
        }
        return s.length();//edit
        
    }
