//Solution 2: two runners

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(s.length() <= 1) return s.length();
        int i = 0 ;
        int j = 1;
        int len = 0;
        HashMap<Character, Boolean> map = new HashMap<Character, Boolean>();
        map.put(s.charAt(0), true);
        while(j < s.length()){
            
            if (map.containsKey(s.charAt(j))){
                len = Math.max(len, j - i);
                while(map.containsKey(s.charAt(j))){
                    map.remove(s.charAt(i++));
                }
                map.put(s.charAt(j++), true);
            } else {
                map.put(s.charAt(j), true);
                j++;
            }
            
        }
        len = Math.max(len, j - i);
        return len;
        
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////

// Solution1: recursion

public class Solution {
    public int lengthOfLongestSubstring(String s) {
       if (s.length() <= 1) return s.length();
	       int len = 1;
	       
	       int j = 1;
	       HashMap<Character, Boolean> map = new HashMap<Character, Boolean>();
	       map.put(s.charAt(0), true);
	       while(j < s.length()){
	           if (!map.containsKey(s.charAt(j))){
	               map.put(s.charAt(j), true);
	               len++;
	           } else {
	               int sub = lengthOfLongestSubstring(s.substring(1, s.length()));
	               return len > sub ? len: sub;
	           }
	       }
	       return len;
    }
}
