Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:

  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6

// if tokens[i] is a number, push it into stack
// if tokens[i] is a operator, pop 2 numbers from the stack, 
//compute the result using the operator and push the result to the stack.




public class Solution {
    public int evalRPN(String[] tokens) {
        if (tokens.length == 1) return Integer.parseInt(tokens[0]);
	        Stack<Integer> s = new Stack<Integer>();
	        for (int i = 0; i < tokens.length; i++){
	            String str = tokens[i];
	        	int n = 0;
	            if (str.length() > 1){
	                n = Integer.parseInt(tokens[i]);	                
	            } else {
	                n = Character.getNumericValue(str.charAt(0));
	            }
	            if ( str.charAt(str.length()-1) >= '0' && str.charAt(str.length()-1) <= '9'){
	                s.push(n);
	                continue;
	            }
	            int tmp = 0;
	            int x = s.pop();
	            int y = s.pop();
	            if (tokens[i].equals("+")){
	               tmp = x + y;
	            } else if (tokens[i].equals("-")){
	                tmp = y - x; 
	            } else if (tokens[i].equals("*")){
	                tmp = x * y;
	            } else {
	                tmp = y / x;
	            }
	            s.push(tmp);
	        }
	        return s.pop();
    }
}
