//Keep a non-descending stack. O(n).
//idea from: https://github.com/AnnieKim/LeetCode/blob/master/LargestRectangleinHistogram.h

public class Solution {
    public int largestRectangleArea(int[] height) {
       if (height.length == 0 ) return 0;
       if (height.length == 1 ) return height[0];
       
       ArrayList<Integer> h = new ArrayList<Integer>();
       for (int i = 0; i < height.length; i++){
           h.add(height[i]);
       }
       h.add(0);
       Stack<Integer> stk = new Stack<Integer>();
       int result = 0;
       int i = 0;
       while(i < height.length + 1){
           if (stk.isEmpty() || h.get(stk.peek()) <= h.get(i)){
               stk.push(i++);
           } else {
               int index = stk.pop();
               int width = stk.isEmpty() ? i : i - stk.peek() - 1;
               result = Math.max(result, width * height[index]);
           }
       }
       return result;
    }
}
