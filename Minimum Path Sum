public class Solution {
    public int minPathSum(int[][] grid) {
        if (grid.length == 0 || grid[0].length == 0) return 0;
        int m = grid.length;
        int n = grid[0].length;
        if (m == 1){
            int sum = 0;
            for (int i = 0; i < grid[0].length; i++){
                sum += grid[0][i];
            }
            return sum;
        }
        if (n == 1){
            int sum = 0;
            for (int j = 0; j < grid.length; j++){
                sum += grid[j][0];
            }
            return sum;
        }
        // solution 1: add to the beginning
        for (int i = m - 2; i >= 0 ; i--){
            grid[i][n-1] += grid[i+1][n-1] ;
        }
        for (int j = n - 2; j >=0 ; j--){
            grid[m-1][j] += grid[m-1][j+1];
        }
        for (int i = m - 2; i >= 0; i--){
            for (int j = n - 2; j >= 0; j--){
                grid[i][j] += Math.min(grid[i][j+1], grid[i+1][j]);
            }
        }
        return grid[0][0];
        
        // solution 2: dp, do not change grid
        //   int[] dp = new int[n];
        //   dp[0] = grid[0][0];
        //   for (int i = 1; i < n; i++){
        //       dp[i] = grid[0][i] + dp[i-1];
        //   }
        //   for (int i = 1; i < m; i++){
        //       dp[0] += grid[i][0];
        //       for (int j = 1; j< n; j++){
        //           dp[j] = grid[i][j] + Math.min(dp[j], dp[j-1]);
        //       }
        //   }
        //   return dp[n-1];
    }
}
