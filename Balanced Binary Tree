/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 /**
  * check height of left subtree and right subtree
  * O(n) time , O(logn) space
  * */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if (checkHeight(root) == -1) return false;
        else return true;
    }
    
    public int checkHeight(TreeNode root){
        if (root == null) return 0;
        int leftHeight = checkHeight(root.left);
        if (leftHeight == -1) return -1;
        int rightHeight = checkHeight(root.right);
        if (rightHeight == -1) return -1;
        
        int diff = Math.abs(leftHeight - rightHeight);
        if (diff > 1) return -1;
        return 1 + Math.max(leftHeight, rightHeight);
    }
    
}
