/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 // Solution 2: DFS
 // Solution 1: BFS, using to variables
 
public class Solution2 {
    public ArrayList<ArrayList<Integer>> levelOrder(TreeNode root) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        levelOrderHelper(root, 0, result);
        return result;
    }
    
    public void levelOrderHelper(TreeNode root, int level, ArrayList<ArrayList<Integer>> result){
        if (root == null) return;
        if (result.size() <= level){
            ArrayList<Integer> newLevel = new ArrayList<Integer>();
            result.add(newLevel);
        }
        result.get(level).add(root.val);
        levelOrderHelper(root.left, level + 1, result);
        levelOrderHelper(root.right, level + 1, result);
    }
}
 
 
 
public class Solution1 {
    public ArrayList<ArrayList<Integer>> levelOrder(TreeNode root) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if (root == null) return result;
        
        ArrayList<Integer> level = new ArrayList<Integer>();
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.add(root);
        int countCur = 1;
        int countNext = 0;
        while(!q.isEmpty()){
            TreeNode n = q.poll();
            countCur--;
            level.add(n.val);
            if (n.left != null){
                q.add(n.left);
                countNext++;
            }
            if (n.right != null){
                q.add(n.right);
                countNext++;
            }
            
            if (countCur == 0){
                result.add(level);
                level = new ArrayList<Integer>();
                countCur = countNext;
                countNext = 0;
            }
            
        }
        return result;
    }
}
