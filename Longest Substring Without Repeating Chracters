//Solution 2: two runners

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s.length() <= 1 ) return s.length();
        HashMap<Character, Boolean> map = new HashMap<Character, Boolean>();
        int i = 0; 
        int j = 1;
        int len = 0;
        map.put(s.charAt(0), true);
        while(j < s.length()){
            if (!map.containsKey(s.charAt(j))){
                map.put(s.charAt(j++), true);
            } else {
                len = Math.max(len, j - i);
                while(map.containsKey(s.charAt(j))){
                    map.remove(s.charAt(i++));
                }
                map.put(s.charAt(j++), true);
            }
        }
        len = Math.max(len, j - i);
        return len;
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////

// Solution1: recursion

public class Solution {
    public int lengthOfLongestSubstring(String s) {
       if (s.length() <= 1 ) return s.length();
      
       int j = 1;
       HashMap<Character, Boolean> map = new HashMap<Character, Boolean>();
       map.put(s.charAt(0), true);
       while(j < s.length()){
           if (!map.containsKey(s.charAt(j))){
               map.put(s.charAt(j), true);
               j++;
           } else {
               int sublen = lengthOfLongestSubstring(s.substring(1, s.length()));
               return j > sublen ? j : sublen;
           }
       }
       return j;
    }
}
