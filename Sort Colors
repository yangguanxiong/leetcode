// Solution2: swap with the beginning or the end of the array
// Learned from: https://github.com/AnnieKim/Leetcode#leetcode

public class Solution2 {
    public void sortColors(int[] A) {
        int i = 0;
        int j = A.length - 1;
        int zero = -1;
        while (i <= j){
            switch(A[i]){
                case 0:
                    int tmp = A[++zero];
                    A[zero] = A[i];
                    A[i++] = tmp;
                    break;
                case 1:
                    i++;
                    break;
                case 2:
                    int tmp2 = A[j];
                    A[j--] = A[i];
                    A[i] = tmp2;
                    break;
            }
        }
    }
}


//Solution1: using runners
public class Solution1 {
    public void sortColors(int[] A) {
        if (A.length <= 1) return ;
        int i = 0;
        int j = A.length - 1;
        while(i < j){
            if (A[i] == 0){
                i++; continue;
            }
            if (A[j] == 2){
                j--; continue;
            }
            if (A[i] == 2){
                int tmp = A[i];
                A[i] = A[j];
                A[j--] = tmp;
                continue;
            }
            if (A[j] == 0){
                int tmp = A[j];
                A[j] = A[i];
                A[i++] = tmp;
                continue;
            }
            int r = i + 1;
            while(r <= j){
                if (A[r] == 2){
                    int tmp = A[r];
                    A[r] = A[j];
                    A[j--] = tmp;
                } else if (A[r] == 0){
                    int tmp = A[r];
                    A[r] = A[i];
                    A[i++] = tmp;
                } else {
                    r++; continue;
                }
                break;
            }
            if (r > j) return;
        }
    }
}
