public class Solution {
    public int minimumTotal(ArrayList<ArrayList<Integer>> triangle){
        if (triangle.size() == 0 || triangle.get(0).size() == 0) return Integer.MAX_VALUE;
        if (triangle.size() == 1) return triangle.get(0).get(0);
        
        for (int n = triangle.size() - 2; n >= 0 ; n--){
            for (int i = 0; i < triangle.get(n).size(); i++){
                triangle.get(n).set(i, triangle.get(n).get(i) + Math.min(triangle.get(n+1).get(i), triangle.get(n+1).get(i+1)));
            }
        }
        return triangle.get(0).get(0);
    }
    
    // DFS Solution: time limit exceed
    // public int result;
    // public int minimumTotal(ArrayList<ArrayList<Integer>> triangle) {
    //     result = Integer.MAX_VALUE;
    //     ArrayList<Integer> path = new ArrayList<Integer>();
    //     if (triangle.size() == 0 || triangle.get(0).size() == 0) return result;
    //     path.add(triangle.get(0).get(0));
    //     findMin(triangle, path, 0, 0);
    //     return result;
    // }
    // public void findMin(ArrayList<ArrayList<Integer>> triangle, ArrayList<Integer> path, int idx, int curLevel){
    //     if (path.size() == triangle.size()){
    //         int sum = 0;
    //         for (int i = 0; i < path.size(); i++){
    //             sum += path.get(i);
    //         }
    //         if (sum < result) result = sum;
    //         return;
    //     }
    //     for (int i = idx; i <= idx + 1; i++){
    //         path.add(triangle.get(curLevel + 1).get(i));
    //         findMin(triangle, path, i, curLevel + 1);
    //         path.remove(path.size() - 1);
    //     }
    // }
}
