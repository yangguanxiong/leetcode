public class Solution {
    public void solve(char[][] board) {
        if (board.length <= 2 || board[0].length <= 2) return;
        for (int i = 0; i < board.length; i++){
            for (int j = 0; j < board[0].length; j++){
                if (i == 0 || i == board.length - 1 || j == 0 || j == board[0].length - 1){
                    bfs(board, i, j);
                }
            }
        }
        
        for (int i = 0; i < board.length; i++ ){
            for (int j = 0; j < board[0].length; j++){
                if (board[i][j] == 'V'){
                    board[i][j] = 'O';
                } else {
                    board[i][j] = 'X';
                }
            }
        }
        return;
    }
    
    public void bfs(char[][] board, int row, int col){
        if (board[row][col] != 'O') return;
        Queue<ArrayList<Integer>> q = new LinkedList<ArrayList<Integer>>();
        ArrayList<Integer> point = new ArrayList<Integer>();
        point.add(row);
        point.add(col);
        q.add(point);
        while(!q.isEmpty()){
            ArrayList<Integer> cur = q.poll();
            int i = cur.get(0);
            int j = cur.get(1);
            if (i < 0 || i > board.length - 1 || j < 0 || j > board[0].length - 1) continue;
            if (board[i][j] != 'O') continue;
            board[i][j] = 'V';
            ArrayList<Integer> up = new ArrayList<Integer>();
            ArrayList<Integer> down = new ArrayList<Integer>();
            ArrayList<Integer> left = new ArrayList<Integer>();
            ArrayList<Integer> right = new ArrayList<Integer>();
            up.add(i-1); up.add(j);
            down.add(i+1); down.add(j);
            left.add(i); left.add(j-1);
            right.add(i); right.add(j+1);
            q.add(up);
            q.add(down);
            q.add(left);
            q.add(right);
        }
        
    }
    
    // dfs may goes too deep and cause stack overflow
    // public void dfs(char[][] board, int row, int col){
    //     if (row < 0 || row > board.length - 1 || col < 0 || col > board[0].length - 1) return;
    //     if (board[row][col] == 'X'|| board[row][col] == 'V') return;
    //     board[row][col] = 'V';
    //     dfs(board, row + 1, col);
    //     dfs(board, row - 1, col);
    //     dfs(board, row, col - 1);
    //     dfs(board, row, col + 1);
    // }
}
