public class Solution {
    public void solve(char[][] board) {
        if (board.length <= 2 || board[0].length <= 2) return;
        int m = board.length; 
        int n = board[0].length;
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if (i == 0 || i == m - 1 || j == 0 || j == n - 1){
                    bfs(board, i, j, m, n);
                }
            }
        }
        for (int i = 0; i < m ; i++){
            for (int j = 0; j < n; j++){
                if (board[i][j] == 'A') board[i][j] = 'O';
                else board[i][j] = 'X';
            }
        }
    }
    
    public void bfs(char[][] board, int i, int j, int m, int n){
        if (board[i][j] != 'O') return;
        Queue<ArrayList<Integer>> q = new LinkedList<ArrayList<Integer>>();
        ArrayList<Integer> p = new ArrayList<Integer>();
        p.add(i); p.add(j);
        q.add(p);
        while(!q.isEmpty()){
            ArrayList<Integer> cur = q.poll();
            int x =  cur.get(0);
            int y =  cur.get(1);
            if (x < 0 || x >= m || y < 0 || y >= n || board[x][y] != 'O') continue;
            board[x][y] = 'A';
            ArrayList<Integer> up = new ArrayList<Integer>();
            ArrayList<Integer> down = new ArrayList<Integer>();
            ArrayList<Integer> left = new ArrayList<Integer>();
            ArrayList<Integer> right = new ArrayList<Integer>();
            up.add(x - 1); up.add(y);
            down.add(x + 1); down.add(y);
            left.add(x); left.add(y - 1);
            right.add(x); right.add(y + 1);
            q.add(up);
            q.add(down);
            q.add(left);
            q.add(right);
        }
    }
   
    
    
    // dfs may goes too deep and cause stack overflow
    // public void dfs(char[][] board, int row, int col){
    //     if (row < 0 || row > board.length - 1 || col < 0 || col > board[0].length - 1) return;
    //     if (board[row][col] == 'X'|| board[row][col] == 'V') return;
    //     board[row][col] = 'V';
    //     dfs(board, row + 1, col);
    //     dfs(board, row - 1, col);
    //     dfs(board, row, col - 1);
    //     dfs(board, row, col + 1);
    // }
}
