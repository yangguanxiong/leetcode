/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder.length == 0) return null;
        if(inorder.length != postorder.length) return null;
        TreeNode root = buildTree(inorder, 0, inorder.length -1, postorder, 0, postorder.length -1);
        return root;
    }
    public TreeNode buildTree(int[] in, int iStart, int iEnd, int[] p, int pStart, int pEnd){
        if(pStart > pEnd || iStart > iEnd) return null;
        TreeNode root = new TreeNode(p[pEnd]);
        for(int i = iStart; i <= iEnd; i++){
            if (in[i] == root.val){
                root.left = buildTree(in, iStart, i - 1, p, pStart, pStart + i - iStart - 1);
                root.right = buildTree(in, i+ 1, iEnd, p, pStart + i - iStart, pEnd - 1);
            }
        }
        return root;
    }
}
