/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if (preorder.length == 0) return null;
        if (preorder.length != inorder.length) return null;
        
        TreeNode root = buildTree( preorder, 0, preorder.length - 1, inorder,  0, inorder.length - 1);
        return root;
    }
    
    public TreeNode buildTree(int[] pre, int pStart, int pEnd, int[] in, int iStart, int iEnd){
        if(pStart > pEnd || iStart > iEnd) return null;
        TreeNode root = new TreeNode(pre[pStart]);
        
        for (int i = iStart; i <= iEnd; i++){
            if (in[i] == pre[pStart]){
                root.left = buildTree(pre, pStart + 1, pStart + i - iStart, in, iStart,  i - 1);
                root.right = buildTree(pre, pStart +i - iStart + 1, pEnd, in, i + 1 , iEnd);
            }
        }
        return root;
    }
    
    
    
}
