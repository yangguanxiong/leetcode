public class Solution {
    public ArrayList<ArrayList<String>> partition(String s) {
        ArrayList<ArrayList<String>> result = new ArrayList<ArrayList<String>>();
        ArrayList<String> p = new ArrayList<String>();
        if (s.length() <= 1){
            p.add(s);  
            result.add(p);
            return result;
        }
        findPartition(s, 0, p, result);
        return result;
    }
    
    public void findPartition(String s, int idx, ArrayList<String> p, ArrayList<ArrayList<String>> result){
        if (idx == s.length()){
            ArrayList<String> clone = new ArrayList<String>(p);
            result.add(clone);
            return;
        }
        StringBuilder test = new StringBuilder();
        for (int i = idx; i < s.length(); i++){
            test.append(s.charAt(i));
            if (!isPalindrome(test.toString())) continue;
            p.add(test.toString());
            findPartition(s, i + 1, p, result);
            p.remove(p.size() - 1);
        }
    }
    
    public boolean isPalindrome(String s){
        if (s.length() <= 1) return true;
        int i = 0; 
        int j = s.length() - 1;
        while(i < j){
            if (s.charAt(i) != s.charAt(j)){
                return false;
            }
            i++; j--;
        }
        return true;
    }
}
