/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
 /** step 1: sort intervals in ascending order of start
  *  step 2: traverse intervals, merge or add
  */
public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        if (intervals.size() <= 1) return intervals;
        
        Comparator<Interval> comp = new Comparator<Interval>(){
             public int compare(Interval i1, Interval i2){
                 if (i1.start > i2.start) return 1;
                 if (i1.start < i2.start) return -1;
                 else return 0;
            }
        };
        
        Collections.sort(intervals, comp);
        ArrayList<Interval> result = new ArrayList<Interval>();
        
        result.add(intervals.get(0));
        for (int i = 1; i < intervals.size(); i++){
            Interval last = result.get(result.size() - 1);
            if (intervals.get(i).start > last.end){
                result.add(intervals.get(i));
            } else {
                last.end = Math.max(last.end, intervals.get(i).end);
            }
        }
        return result;
    }
}
