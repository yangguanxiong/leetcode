//find permutations: DFS, similar with Path Sum II

public class Solution {
   
    public ArrayList<ArrayList<Integer>> permute(int[] num) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if (num.length == 0) return result;
        
        boolean[] avail = new boolean[num.length];
        ArrayList<Integer> sub = new ArrayList<Integer>();
        
        findPermutation(num, avail, result, sub);
        return result;
   
    }
    
    public void findPermutation(int[] num, boolean[] avail, ArrayList<ArrayList<Integer>> result, ArrayList<Integer> sub){
        if (sub.size() == num.length){
            //add to result
            ArrayList<Integer> subCopy = new ArrayList<Integer>(sub);
            result.add(subCopy);
        }
        for (int i = 0; i < num.length; i++){
            if (avail[i] == false){
              avail[i] = true;
              sub.add(num[i]);
              findPermutation(num, avail, result, sub);
              sub.remove(sub.size() - 1);
              avail[i] = false;  
            }
        }
    }
}
