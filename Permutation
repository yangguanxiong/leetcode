//find permutations: DFS, similar with Path Sum II

public class Solution {
   
    public ArrayList<ArrayList<Integer>> permute(int[] num){
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> p = new ArrayList<Integer>();
        if (num.length == 0) return result;
        boolean[] used = new boolean[num.length];
        findPermutation(num, used, p, result);
        return result;
    }
    
    public void findPermutation(int[] num, boolean[] used, ArrayList<Integer> p, ArrayList<ArrayList<Integer>> result){
        if (p.size() == num.length){
            ArrayList<Integer> clone = new ArrayList<Integer>(p);
            result.add(clone);
            return;
        }
        
        for (int i = 0; i < num.length; i++){
            if (used[i] == false){
                p.add(num[i]);
                used[i] = true;
                findPermutation(num, used, p, result);
                used[i] = false;
                p.remove(p.size() - 1);
            }
        }
    }
}
