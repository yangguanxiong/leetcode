// n is root or leaf: result[n] += result[n-1]*2
// n is neither root nor leaf: 
//      compute different cases: 1 to n-2 nodes may be n's ancestors, the rest of nodes are n's children

public class Solution {
    public int numTrees(int n) {
        if (n == 0) return 0;
		if (n == 1) return 1;
		if (n == 2) return 2;
        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;       
        dp[2] = 2; 
        for (int i = 3; i <= n; i++){
            dp[i] = dp[i-1] *2 + nIsNeitherRootNorLeaf(i, dp);
        }
        return dp[n];
    }
    
    public int nIsNeitherRootNorLeaf(int n, int[] dp){
        int num = 0;
        for (int i = 1; i <= n-2 ; i++){
            num += dp[i] * dp[n - 1 - i];
        }
        return num;
    }
}
