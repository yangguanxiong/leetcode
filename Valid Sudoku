public class Solution {
    public boolean isValidSudoku(char[][] board) {
        // Start typing your Java solution below
        // DO NOT write main() function
        
        if (board.length != 9 || board[0].length != 9) return false;
         HashMap<Character, Boolean> map = new HashMap<Character, Boolean>();
        
        //check row
        for (int i = 0; i < board.length; i++){
            if (board[i].length != 9) return false;
            for (int j = 0; j < board[i].length; j++){
                
               // HashMap<Character, Boolean> map = new HashMap<Character, Boolean>();
                if ( map.containsKey(board[i][j]) && board[i][j] != '.'){
                    return false;
                } else {
                    map.put(board[i][j], true);
                }
            }
            map = new HashMap<Character, Boolean>();
        }
        
        //check column
         map = new HashMap<Character, Boolean>();
        for (int i = 0; i < board.length; i++){
            for (int j = 0; j < board.length; j++){
               // HashMap<Character, Boolean> map = new HashMap<Character, Boolean>();
                if ( map.containsKey(board[j][i]) && board[j][i] != '.'){
                    return false;
                } else {
                    map.put(board[j][i], true);
                }
            }
            map = new HashMap<Character, Boolean>();
        }
        
        //check region
         map = new HashMap<Character, Boolean>();
        for ( int i = 0; i <= 6; i+=3){
            for (int j = 0; j<=6 ; j+=3){
                
                //check each small region
                for (int k = i + 0; k < i+3; k++){
                    for (int m = j + 0; m < j+3; m++){
                      
                        if ( map.containsKey(board[k][m]) && board[k][m] != '.'){
                            return false;
                        } else {
                            map.put(board[k][m], true);
                        }  
                    }
                }
                // clear HashMap
                 map = new HashMap<Character, Boolean>();
            }
        }
        
        return true;
        
    }
}
