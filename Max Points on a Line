Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.

/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */
public class Solution {
    public int maxPoints(Point[] points) {
        if (points.length <= 2) return points.length;
		int maxNum = 2;
		Comparator<Point> comp = new Comparator<Point>(){
			@Override
			public int compare(Point p1, Point p2){
				if (p1.x > p2.x) return 1; // natural ordering
				if (p1.x < p2.x) return -1;
				else {
					if (p1.y > p2.y) return 1;
					if (p1.y < p2.y) return -1;
				}
				return 0;
			}
		};
		ArrayList<Point> list = new ArrayList<Point>();
		for (int i = 0; i < points.length; i++){
			list.add(points[i]);
		}
		Collections.sort(list, comp);
		int count = 1;
		for (int i = 1; i < list.size(); i++){
			if (list.get(i).x == list.get(i-1).x) count++;
			else {
				maxNum = Math.max(count, maxNum);
				count = 1;
			}
		}
		maxNum = Math.max(count, maxNum);
		for (int i = 0; i < points.length - 1; i++){
			if (points[i].x == points[i + 1].x) continue;
			Point p1 = points[i];
			Point p2 = points[i + 1];
			double k = (double)(p2.y - p1.y) / (double)(p2.x - p1.x);
			double b = p1.y - k * p1.x;
			count = 0;
			for (int j = 0; j < points.length; j++){
				double yprime = k * points[j].x + b;
				if (Math.abs(points[j].y - yprime) < 0.0001) count++;				
			}
			maxNum = Math.max(maxNum,  count);
		}
		return maxNum;
    }
}
