/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
 // Constant Space solution: idea from https://github.com/AnnieKim/LeetCode/blob/master/CopyListwithRandomPointer.h
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        // constant space solution
        if (head == null) return head;
        for (RandomListNode cur = head; cur != null; cur = cur.next.next){
            RandomListNode newNode = new RandomListNode(cur.label);
            newNode.next = cur.next;
            cur.next = newNode;
        }
        for (RandomListNode cur = head; cur != null; cur = cur.next.next){
            if (cur.random != null)                // don't forget null case!!!!!!!!!!
            cur.next.random = cur.random.next;
        }
        RandomListNode dummy = new RandomListNode(0);
        RandomListNode r = dummy;
        for (RandomListNode cur = head; cur != null; cur = cur.next){
            r.next = cur.next;
            r = r.next;
            cur.next = r.next;
        }
        return dummy.next;
    }
}
 
// my Original Solution using HashMap
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
       
        if (head == null) return null;
        RandomListNode newHead = new RandomListNode(head.label);
        HashMap<RandomListNode , RandomListNode> map = new HashMap<RandomListNode, RandomListNode>();
        RandomListNode r = head;
        RandomListNode rnew = newHead;
        map.put(r, rnew);
        while(r.next != null){	          
            rnew.next = new RandomListNode(r.next.label);
            map.put(r.next, rnew.next);
            r = r.next;
            rnew = rnew.next;
        }
        r = head;
        rnew = newHead;
        while(r != null){
            if (r.random == null) rnew.random = null;
            else{	                
                rnew.random = map.get(r.random);	               
            }
            r = r.next;
            rnew = rnew.next;
        }
        return newHead;
    }
}
