/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        // solution2ï¼š non-recursive 
        // if (head == null || head.next == null) return head;
        // ListNode dummy = new ListNode(0);
        // dummy.next = head;
        // ListNode p1 = head;
        // ListNode p2 = head.next;
        // ListNode p3 = dummy;
        // while(p2 != null){
        //     if (p1.val != p2.val){
        //         p1 = p1.next;
        //         p2 = p2.next;
        //         p3 = p3.next;
        //     } else {
        //         while(p1.val == p2.val){
        //             p2 = p2.next;
        //             if (p2 == null){
        //                 if (p3 == dummy ) return null;
        //                 else {
        //                     p3.next = null;
        //                     return dummy.next;
        //                 }
        //             }
        //         }
        //         p3.next = p2;
        //         p1 = p2;
        //         p2 = p2.next;
        //     }
        // }
        // return dummy.next;
        
        ///////////////////////////////////////////////////////////////////////////////////////////////
        // Solution 1: recursion
        if (head == null || head.next == null) return head;
        ListNode p = head.next;
        while(p.val == head.val){
            p = p.next;
            if (p == null) return null;
        }
        if (head.next != p) {
            return deleteDuplicates(p);
        } else {
            head.next = deleteDuplicates(p);
        }
        return head;
        
    }
}
