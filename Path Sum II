/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 // another solution
 /**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> pathSum(TreeNode root, int sum) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> path = new ArrayList<Integer>();
        if (root != null){
            findPathSum(root, sum, result, path);
        }
        return result;
    }
    
    public void findPathSum(TreeNode root, int sum, ArrayList<ArrayList<Integer>> result, ArrayList<Integer> path){
        if (root == null) return;
        if (root.left == null && root.right == null && root.val == sum){
            
            // make a copy of path and add to result. It is necessary to make a copy.
            ArrayList<Integer> pathCopy = new ArrayList<Integer>(path); 
            pathCopy.add(root.val);
            result.add(pathCopy);
        } 
        
        path.add(root.val);
        findPathSum(root.left, sum - root.val, result, path);
        findPathSum(root.right, sum - root.val, result, path);
        path.remove(path.size() - 1);
    }
    
}
 
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 // old solution
public class Solution {
    public ArrayList<ArrayList<Integer>> pathSum(TreeNode root, int sum) {
        // Start typing your Java solution below
        // DO NOT write main() function
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if (root == null) return result;
        
        ArrayList<Integer> path = new ArrayList<Integer>();
        
        if (root.left == null && root.right == null && root.val == sum){
            path.add(root.val);
            result.add(path);
            return result;
        }
        
        ArrayList<ArrayList<Integer>> resultLeft = new ArrayList<ArrayList<Integer>>();
        ArrayList<ArrayList<Integer>> resultRight  = new ArrayList<ArrayList<Integer>>();
        
        if (root.left != null){
            resultLeft = pathSum(root.left, sum - root.val);
        }
        if (root.right != null){
            resultRight = pathSum(root.right, sum - root.val);
        }
        
        for (ArrayList<Integer> p : resultLeft){
            p.add(0, root.val);
        }
        for (ArrayList<Integer> q : resultRight){
            q.add(0, root.val);
        }
        
        result.addAll(resultLeft);
        result.addAll(resultRight);
            
        return result;
        
        
        
        
    }
}
