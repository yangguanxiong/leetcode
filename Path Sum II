/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 // another solution
 /**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> pathSum(TreeNode root, int sum) {
         ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
         if (root == null) return result;
         ArrayList<Integer> path = new ArrayList<Integer>();
         findPath(root, sum, path, result);
         return result;
     }
     
     public void findPath(TreeNode root, int sum, ArrayList<Integer> path, ArrayList<ArrayList<Integer>> result){
         if (root == null) return;
         if (root.left == null && root.right == null && root.val == sum){
             ArrayList<Integer> clone = new ArrayList<Integer>(path);
             clone.add(root.val);
             result.add(clone);
             return;
         }
         path.add(root.val);
         findPath(root.left, sum - root.val, path, result);
         findPath(root.right, sum - root.val, path, result);
         path.remove(path.size() - 1);
    }
}

