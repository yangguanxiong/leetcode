// time: O(n^2), space: O(1);

public class Solution {
    public String longestPalindrome(String s) {
        if (s.length() <= 1) return s;
        int[] result = new int[2];           // save index of result substring
        int[] tmp = new int[2];
        for (int i = 0; i < s.length(); i++){
            tmp = isLPS(s, i, i);            // the length of substring is odd
            if (tmp[1] - tmp[0] > result[1] - result[0]){
                result = tmp;
            }
            tmp = isLPS(s, i, i+ 1);         // the lenght of substring is even
            if (tmp[1] - tmp[0] > result[1] - result[0]){
                result = tmp;
            }
        }
        return s.substring(result[0], result[1]);
    }
    
    public int[] isLPS(String s, int l, int r){
        int[] result = new int[2];
        while(l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)){
            l--;
            r++;
        }
        result[0] = l + 1;
        result[1] = r;
        return result;
    }
}
