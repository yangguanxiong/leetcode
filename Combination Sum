public class Solution {
    public ArrayList<ArrayList<Integer>> combinationSum(int[] candidates, int target){
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if (candidates.length == 0) return result;
        Arrays.sort(candidates);
        ArrayList<Integer> sub = new ArrayList<Integer>();
        combinationSumHelper(candidates, target, 0, sub, result);
        return result;
    }
    
    public void combinationSumHelper(int[] candidates, int target, int idx, ArrayList<Integer> sub, ArrayList<ArrayList<Integer>> result){
        if (target == 0){
            ArrayList<Integer> clone = new ArrayList<Integer>(sub);
            result.add(clone);
            return;
        }
        for (int i = idx; i < candidates.length && target >= candidates[i]; i++){
            sub.add(candidates[i]);
            combinationSumHelper(candidates, target - candidates[i], i, sub, result);
            sub.remove(sub.size() - 1);
        }
    }
}
