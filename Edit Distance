
// O(mn) time, O(mn) space, could be improved to O(n) space
public class Solution {
    public int minDistance(String word1, String word2) {
        if ( word1.length() == 0 ) return word2.length();
        if ( word2.length() == 0 ) return word1.length();
        int m = word1.length();
        int n = word2.length();
        int[][] dp = new int[m+1][n+1];
        for (int i = 1; i <= m; i++){
            dp[i][0] = i;
        }
        for (int j = 1; j <= n; j++){
            dp[0][j] = j;
        }
        for (int i = 1; i <= m; i++){
            for (int j = 1; j <= n; j++){
                int tmpMin = Math.min(1 + dp[i-1][j], 1 + dp[i][j-1]);
                dp[i][j] = Math.min(tmpMin, dp[i-1][j-1] + diff(i,j, word1, word2));
            }
        }
        return dp[m][n];
    }
    public int diff(int i, int j, String word1, String word2){
        if (word1.charAt(i-1) == word2.charAt(j-1)) return 0;
        else return 1;
    }
}
